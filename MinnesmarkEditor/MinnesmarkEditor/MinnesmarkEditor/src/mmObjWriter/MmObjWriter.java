package mmObjWriter;

import java.io.*;
import java.nio.channels.FileChannel;

import javax.swing.JOptionPane;

public class MmObjWriter {
	
	private String imageFileName;
	private String imageSrcPath;
	
	public final String VERSION = "0.1";

    protected FileOutputStream objStream;
    protected PrintWriter objWriter;

    protected int numVerticesWritten = 0;
    protected int numNormalsWritten = 0;

    String fileName;

	
	public String getImageSrcPath() {
		return imageSrcPath;
	}

	public void setImageSrcPath(String imageSrcPath) {
		this.imageSrcPath = imageSrcPath;
	}

		
	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	public String getImageFileName() {
		return imageFileName;
	}

	public void setImageFileName(String imageFileName) {
		this.imageFileName = imageFileName;
	}

	public MmObjWriter(String imageFileName)
	{
		this.imageFileName = imageFileName;
	}
	
	public void beginSave(String fn) {
	        try {
	        	
	        	//JOptionPane.showMessageDialog(null, "entered obj writer "+imageFileName+"  "+imageFileName.lastIndexOf('/'));
	        	
	        	fileName = imageFileName.substring(imageFileName.lastIndexOf('/')+1, imageFileName.length());
	        	
	        	fileName = fileName.substring(0,fileName.indexOf('.'));
	        	
	        	String srcName = imageFileName.substring(0,imageFileName.lastIndexOf('.'));
	        	
	        	//JOptionPane.showMessageDialog(null, "file name "+fileName+"  "+srcName);
	        	
	        	//String[] files = imageFileName.split("."); 
	        	//JOptionPane.showMessageDialog(null,files.length);
	        	//fileName = files[1];
	        	
	        	File file = new File(srcName+".obj");
	        	
	        	File filePath = new File(srcName.substring(0,srcName.lastIndexOf('/')));
	        	
	        	if(!filePath.isDirectory())
	        	{	
	        	     filePath.mkdir();	
	        	}
	        	    
	            objStream = new FileOutputStream(file);
	            objWriter = new PrintWriter(objStream);
	            objWriter.println("# generated by MinnesmarkEditor " + VERSION);
	            objWriter.println("mtllib "+ fileName+".mtl");
	            newObject(fileName);
	            setVertices();
	            setNormals();
	            setVertexTextures();
	            objWriter.println("usemtl Material");
	            faceList();
	            setFaces();
	            numVerticesWritten = 0;
	            numNormalsWritten = 0;
	            writeMtl();
	            writeImageFile();
	            
	        } catch (Exception e) {
	            // TODO don't catch all, but use custom exception for this
	            e.printStackTrace();
	        }
	 }

	 public void endSave() {
	        try {
	            objWriter.flush();
	            objWriter.close();
	            objStream.flush();
	            objStream.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	  }

	   public void face(int a, int b, int c) {
	        objWriter.println("f " + a + " " + b + " " + c);
	   }

	   public void faceList() {
	        objWriter.println("s off");
	   }

	   public void faceWithNormals(int a, int b, int c, int na, int nb, int nc) {
	        objWriter.println("f " + a + "//" + na + " " + b + "//" + nb + " " + c
	                + "//" + nc);
	    }
	   
	   public void faceWithNormals(int a, int b, int c, int d,int normal) {
	        objWriter.println("f " + a + "//" + normal + " " + b + "//" + normal + " " + c
	                + "//" + normal+" "+d+"//"+normal);
	    }

	    public int getCurrNormalOffset() {
	        return numNormalsWritten;
	    }

	    public int getCurrVertexOffset() {
	        return numVerticesWritten;
	    }

	    public void newObject(String name) {
	        objWriter.println("o " + name);
	    }

	    public void normal(MmVec3 n) {
	        objWriter.println("vn " + n.x + " " + n.y + " " + n.z);
	        numNormalsWritten++;
	    }

	    public void vertex(MmVec3 v) {
	        objWriter.println("v " + v.x + " " + v.y + " " + v.z);
	        numVerticesWritten++;
	    }
	    
	    public void textureCoord(float u, float v) {
	        objWriter.println("vt " + u + " " + v);
	   }
	    
	    public void setVertices()
	    {
	    	vertex(new MmVec3(0.150000f,-0.961045f,1.037493f));
	    	vertex(new MmVec3(0.150000f, 1.037493f, 0.961045f));
	    	vertex(new MmVec3(-0.150000f, 1.037493f, 0.961045f));
	    	vertex(new MmVec3(-0.150000f, -0.961045f, 1.037493f));
	    	
	    	
	    	vertex(new MmVec3(0.150000f, -1.037493f, -0.961045f));
	    	vertex(new MmVec3(0.150000f, 0.961046f, -1.037493f));
	    	vertex(new MmVec3(-0.150000f, 0.961045f, -1.037493f));
	    	vertex(new MmVec3(-0.150000f, -1.037493f, -0.961045f));
	       	
	    }
	    
	    public void setNormals()
	    {
	    	normal(new MmVec3(0.0f, -1.0f, 0.0f));
	    	normal(new MmVec3(0.0f, 1.0f, 0.0f));
	    	normal(new MmVec3(1.0f, 0.0f, 0.0f));
	    	normal(new MmVec3(-0.0f, -0.0f, 1.0f));
	    	normal(new MmVec3(-1.0f ,-0.0f, -0.0f));
	    	normal(new MmVec3(0.0f, 0.0f ,-1.0f));
	    }
	    
	    public void setFaces()
	    {
	    	faceWithNormals(1, 2, 3, 4, 1);
	    	faceWithNormals(5, 8, 7, 6, 2);
	    	faceWithNormals(1, 5, 6, 2, 3);
	    	faceWithNormals(2, 6, 7, 3, 4);
	    	faceWithNormals(3, 7, 8, 4, 5);
	    	faceWithNormals(5, 1, 4, 8, 6);
	    }
	    
	    public void setVertexTextures()
	    {
	    	textureCoord(0.0f, 0.0f);
	    	textureCoord(1.0f, 0.0f);
	    	textureCoord(1.0f, 1.0f);
	    	textureCoord(0.0f, 1.0f);
	    	
	    	textureCoord(0.0f, 0.0f);
	    	textureCoord(1.0f, 0.0f);
	    	textureCoord(1.0f, 1.0f);
	    	textureCoord(0.0f, 1.0f);
	    	
	    }
	    
	    public void writeMtl()
	    {
	    	FileOutputStream objStream1;
	        PrintWriter objWriter1;
	        
	        try {
	        	  String srcName = imageFileName.substring(0,imageFileName.lastIndexOf('.'));
	        	  
	              objStream1 = new FileOutputStream(srcName+".mtl");
	              objWriter1 = new PrintWriter(objStream1);
	              objWriter1.println("# generated by MinnesmarkEditor " + VERSION);
		          
		          
		          objWriter1.println("newmtl Material");
		          objWriter1.println("Ns "+ 96.078431);
		          objWriter1.println("Ka "+ 0.000000 +" "+0.000000+" "+0.000000);
		          objWriter1.println("Kd "+ 0.640000 +" "+0.640000+" "+0.640000);
		          objWriter1.println("Ks "+ 0.500000 +" "+0.500000+" "+0.500000);
		          objWriter1.println("Ni "+ 1.000000);
		          objWriter1.println("d "+ 1.000000);
		          objWriter1.println("illum "+ 2);
		          objWriter1.println("map_Kd "+imageFileName.substring(imageFileName.lastIndexOf('/')+1,imageFileName.length()));
		          
		          //JOptionPane.showMessageDialog(null, "img src path "+imageSrcPath);
		          
		          objWriter1.flush();
		          objWriter1.close();
		          objStream1.flush();
		          objStream1.close();
	        }
	        catch(Exception e)
	        {
	        	
	        }
	        
	    }
	    
	    
	    public void writeImageFile()
	    {
	    	
	    	FileChannel src = null,des=null;
			try {
				  
				  
					    src = new FileInputStream(imageSrcPath).getChannel();
					    des = new FileOutputStream(imageFileName).getChannel();
					  
				  
				  try {
					  
	                if(src!=null)
					   des.transferFrom(src, 0, src.size());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			finally
			{
				try {
					if(src!=null)
					{	
					   src.close();
					   des.close();
					}   
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
	    	
	    }
	    
	    public String getImage()
	    {
	    	
	    	String imageName = null;
	    	
	    	try
	    	{
	    	   BufferedReader br = new BufferedReader(new FileReader(imageFileName));
	    	   
	    	   String line;
			   while((line=br.readLine())!=null)
			   {
				   if(line.contains(".mtl"))
				   {
					   String[] lines = line.split(" ");
					   if(lines[lines.length-1].contains(".mtl"))
					   {
						   imageName = lines[lines.length-1];
						   break;
					   }
				   }
			   }
	    	   
	    	}
	    	catch(Exception e)
	    	{
	    		JOptionPane.showMessageDialog(null, e);
	    	}
	    	
	    	
	    	try
	    	{
	    		   imageFileName = imageFileName.substring(0,imageFileName.lastIndexOf('/')+1);
	    		   imageName = imageFileName+imageName;
	    		   BufferedReader br = new BufferedReader(new FileReader(imageName));
		    	   
		    	   String line;
				   while((line=br.readLine())!=null)
				   {
					   if(line.contains("map_Kd"))
					   {
						   String[] lines = line.split(" ");
						   imageName = lines[lines.length-1];
						   return imageName;	  
						   
					   }
				   }
	    		
	    		
	    	}
	    	catch(Exception e)
	    	{
	    		JOptionPane.showMessageDialog(null, e);
	    	}
	    	
	    	return imageName;
	    }
	

}
